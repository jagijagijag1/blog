<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on jagijagijag1 notes</title><link>http://jagijagijag1.github.io/blog/posts/</link><description>Recent content in Posts on jagijagijag1 notes</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><lastBuildDate>Sun, 25 Oct 2020 22:28:40 +0900</lastBuildDate><atom:link href="http://jagijagijag1.github.io/blog/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Qrunch記事のHugo on GitHub Pages移行とHugoテーマ拡張</title><link>http://jagijagijag1.github.io/blog/posts/2020_10_25/</link><pubDate>Sun, 25 Oct 2020 22:28:40 +0900</pubDate><guid>http://jagijagijag1.github.io/blog/posts/2020_10_25/</guid><description>Hugo on GitHub Pagesの構成 移行したときのつまづき 画像リンク修正 テーマHugo Future Imperfect Slimの拡張 cssの上書き ブログパーツの設置 拍手ボタン アクセスカウンタ Pixelaユーザページのsocal icon 閉鎖してしまうQrunchで書いた記事をGitHub Pagesに移行したのと，選んだHugoテーマを少し拡張したので，そのときにやったことを書き留め．
このブログのHugoソースは→GitHub - jagijagijag1/blog at source このブログ用に拡張したテーマは→GitHub - jagijagijag1/hugo-future-imperfect-slim at add-pixela-social Hugo on GitHub Pagesの構成 Qrunchが閉鎖するため移行先としてGitHub Pagesを選択 Qrunch以上に合いそうなサービスがなかったため ブログはGitHubプロジェクト(not ユーザ)に紐づくGitHub Pagesを利用 (https://&amp;lt;user-name&amp;gt;.github.io/&amp;lt;repository-name&amp;gt;にホスト) ブログ単品としてホストしたいので，リポジトリ名をblogにして作成 masterブランチのdocsディレクトリ配下をホストするよう設定 sourceブランチにてHugoファイルを管理 + sourceブランチへのプッシュで起動するGitHub Actionsを設定しmasterブランチにHugoの静的サイト生成結果をpush name: build hugo site on source &amp;amp; deploy to master on: push: branches: - source jobs: deploy: runs-on: ubuntu-18.</description></item><item><title>bulmaのcolumnを使った際にモバイル表示するとサイドに余白が出る場合の対処</title><link>http://jagijagijag1.github.io/blog/posts/2020_04_30/</link><pubDate>Thu, 30 Apr 2020 23:29:08 +0900</pubDate><guid>http://jagijagijag1.github.io/blog/posts/2020_04_30/</guid><description>症状 下記の緑領域のように，classにcolumn指定した要素のpaddingが，モバイル表示した際に画面外に表示されてしまう 解決 下記bodyへのcss設定を入れる ... &amp;lt;style lang=&amp;#34;scss&amp;#34;&amp;gt; ... body { overflow-x: hidden; } ... &amp;lt;/style&amp;gt; 参考 下記で議論されてる class &amp;ldquo;columns&amp;rdquo; too wide on mobile · Issue #449 · jgthms/bulma · GitHub</description></item><item><title>リングフィットアドベンチャーの運動ログをサーバーレスでPixelaに記録する</title><link>http://jagijagijag1.github.io/blog/posts/2020_01_26/</link><pubDate>Sun, 26 Jan 2020 13:19:58 +0900</pubDate><guid>http://jagijagijag1.github.io/blog/posts/2020_01_26/</guid><description>作ったもの リングフィットアドベンチャーの運動ログ(活動時間，消費カロリー，走行距離)をPixelaに記録して草化する機能をサーバーレスで開発 Switch上でスクショを撮りTwitter投稿すると，画像取得・解析してPixelaのグラフに記録 結果 最近のサボりが可視化された💪 トリガになるツイートは↓な感じ #リングフィットアドベンチャー #RingFitAdventure #NintendoSwitch pic.twitter.com/ZnoWCO30No
&amp;mdash; JagiJagiJagi (@jagijagijag1) January 25, 2020
制約 下記画像のような日毎の運動ログ画面から活動時間，消費カロリー, 走行距離を抽出することのみが対象 その他画面のスクショや個別運動ログは対象外 TwitterのツイートページのHTMLを解析するため，ページの仕様が変わると実行不可 まれにAWS Rekognitionが0をoと判定し，Pixelaへの記録時にエラーが発生する (数値しかありえないので無理やり補正できなくもないが未実施) 全体方針 リングフィットの記録はAPIで取得したりはできないので，スクショから情報引っこ抜くしかない(と思われる) 頑張り度と継続度がみたいので，ライフログを色々記録しているPixelaで可視化 Switchスクショ取得方針 Switchのスクショを自動でクラウドストレージに持っていく手段がない SDカードを経由する方法だとバッチ的になる &amp;amp; 怠惰なので続かなそう… Swithcでスクショ投稿はできるので，Twitterにあげてそこから自動でごにょごにょする方針に → サービス連携として手軽なIFTTTを使って特定のハッシュタグ付きTwitter投稿を自動取得 -&amp;gt; 後続処理のAPIを叩くレシピは後述 スクショからの情報抽出 GarminストレスのときはAWS Rekognitionを使ったが，日本語テキスト検出未対応
cf. Garmin connectのストレス測定結果をPixela + Serverlessで草化 - jagijagijag1&amp;rsquo;s tech blog そのためGoogle CloudのVision APIを利用する方針で検討，デモ試して行けそう</description></item><item><title>Cloue Run + Puppeteer + Cloud Schedulebr でサーバーレスなクロールを定期実行する</title><link>http://jagijagijag1.github.io/blog/posts/2019_11_23/</link><pubDate>Sat, 23 Nov 2019 10:38:40 +0900</pubDate><guid>http://jagijagijag1.github.io/blog/posts/2019_11_23/</guid><description>つくるもの 手軽に定期実行するクローラを作りたかった 題材として，あすけん のスコア(健康度)をPixelaに転記する処理を1日1回実行する自動化システムをつくる 転記の結果 つまづきメモ AWS LambdaをやめてGCP Cloud Runを選択 まず最初に，ローカルでPuppeteerを用いてaskenをcrawl → pixelaへ記録する機能を開発 asken2pixela/local GitHub これをベースにPuppeterr on Lambdaでサーバーレスな定期クロールを実現するつもりだった ref: Puppeteer on AWS LambdaをTypescriptからサクッと使う(2019年9月版) - ADliveテックブログ が，Page.$$eval()の返り値が通常のPuppeteerとLambda用のPuppeteerとで違った… 通常のPuppeteer: Array&amp;lt;Element&amp;gt;が返ってきた Lambda用のPuppeteer: Array&amp;lt;ElementHandle&amp;gt;が返ってきた このギャップを埋める修正が面倒なので，ローカルで動いているコード(=普通のPuppeteer)をサーバーレスで動かせばいいのでは? → Cloud Runがある！ Cloud Run: リクエストに応じてコンテナを起動・処理するサーバーレスなGCPのサービス Puppeteerのevalなどで渡す関数内処理のロギング PuppeteerのPage.$$eval()などの引数で渡す関数内でconsole.log()でログを取りたかったが，そのまま書いてもスコープが変わるためコンソール出力されない これに対し，consleイベントをdispatchすることができたため，Pageオブジェクトに対して下記処理を実施し，Page.$$eval()内のログ出力に成功 ref: javascript - Puppeteer log inside page.evaluate - Stack Overflow const browser = await puppeteer.</description></item><item><title>Boostnoteの動作が重いときの一解決事例</title><link>http://jagijagijag1.github.io/blog/posts/2019_10_05/</link><pubDate>Sat, 05 Oct 2019 22:45:43 +0900</pubDate><guid>http://jagijagijag1.github.io/blog/posts/2019_10_05/</guid><description>結論 &amp;ldquo;Preference&amp;rdquo; → &amp;ldquo;Boostnoteについて&amp;rdquo; → &amp;ldquo;解析&amp;quot;でBoostnote の機能向上のための解析機能を有効にするをオフにすると解決するかも 症状 Boostnote上で頻繁にカーソル移動・文字入力などの動作が重くなる (キー入力の反映が遅延する) CPU使用率を見てみると，不定期にBoostnoteのCPU使用率が異常上昇していた 原因調査 Developer Toolを開くと，AWS CognitoへのPOSTメソッドの失敗が大量にあらわれていた 調べると↓とほぼ同様の症状だが，ここでは処理が重いという言及もなし Amazon Cognito Indentity status 400 Issue #1905 BoostIO/Boostnote GitHub Cognitoへのアクセスは使用状況レポートの収集のためのようで，上記Issueでは無視するかレポート機能をオフにするかとのこと 自分のケースではネットワーク接続が無い状況でBoostnoteを使ったときにこの症状が発生していた 解決 実際に&amp;quot;Preference&amp;rdquo; → &amp;ldquo;Boostnoteについて&amp;rdquo; → &amp;ldquo;解析&amp;quot;でBoostnote の機能向上のための解析機能を有効にするをオフにしてみたところ，動作が重くなる事象がなくなり，CPU使用率も上がらなくなった</description></item><item><title>QrunchブログのサイドモジュールにPixelaグラフを表示する</title><link>http://jagijagijag1.github.io/blog/posts/2019_09_03/</link><pubDate>Tue, 03 Sep 2019 22:53:56 +0900</pubDate><guid>http://jagijagijag1.github.io/blog/posts/2019_09_03/</guid><description>先日Qrunchの大幅アップデートにより，ブログのカスタマイズ性が上がった 任意のHTML・JSスクリプトが挿入可能に 【お知らせ】正式リリース前最後の大幅アップデートを行います！（8月下旬予定）
ということで，↓で紹介されているはてなブログへのPixelaグラフ埋め込みをQrunchでもできるはず! はてなブログに Pixela グラフを埋め込んで、さらにツールチップを表示させる方法
完成図 表示ごとにincrementされるグラフで簡易PVに 過去に作ったストレス草化で，ストレスを感じつつも生存してる報告 手順 a-knowさんのブログ見れば問題ないけど，一応QrunchのUI上でどこを設定するかメモ (指定するコードも元記事のまま) 以下，[ユーザーメニュー]→[デザインカスタマイズ] or ダッシュボード内[デザイン]で表示されるブログのデザイン設定画面で作業 サイドモジュール追加 (グラフ表示領域設定) [サイドモジュール]にて[モジュールを追加する] [モジュールタイプ]で[カスタム]を選択 [モジュールタイトル]は任意，[コンテンツ（カスタムHTML）]に下記コード(a-knowさんブログまま)を入力し，[追加する] &amp;lt;div id=&amp;#34;svg-load-area&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;div style=&amp;#34;text-align:right;&amp;#34;&amp;gt;Powered by &amp;lt;a href=&amp;#34;https://pixe.la/&amp;#34; target=&amp;#34;_blank&amp;#34;&amp;gt;Pixela&amp;lt;/a&amp;gt;&amp;lt;/div&amp;gt; ヘッダ下 or フッタ上にscriptタグ追加 (表示するグラフの設定) [カスタムHTML]にて[ヘッダー下] or [フッター上]を選択 ヘッダ下 or フッタ上へのコード指定はPRO機能だが，今の所ベータ期間で誰でも無料でPRO機能を有効化できる https://qrunch.net/pro 表示された入力エリアに下記コード(a-knowさんブログまま)を入力し，[適用] (グラフURLは表示したいグラフを指定) &amp;lt;script src=&amp;#34;https://unpkg.com/tippy.js@3/dist/tippy.all.min.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script&amp;gt; document.addEventListener(&amp;#39;DOMContentLoaded&amp;#39;, function(){ $(&amp;#39;#svg-load-area&amp;#39;).load(&amp;#39;https://pixe.la/v1/users/a-know-blog/graphs/page-views?mode=short&amp;#39;, function(){ tippy(&amp;#39;.</description></item><item><title>サーバーレスで定期的にDropbox内のファイルをS3に転送する</title><link>http://jagijagijag1.github.io/blog/posts/2019_03_02/</link><pubDate>Sat, 02 Mar 2019 23:33:17 +0900</pubDate><guid>http://jagijagijag1.github.io/blog/posts/2019_03_02/</guid><description>つくったもの 定期実行でDropboxの特定フォルダ下ファイルをS3へ転送する機能 具体的には，CloudWatch Eventで定期起動し下記を実行するLambda関数を開発 Dropbox APIを叩いて特定フォルダ配下の全ファイルを取得 当該ファイルをダウンロードし，S3の特定バケットに保存 バケット保存が成功した場合，Dropbox側のオリジナルファイルを削除 経緯 以前S3に入ってきた画像を解析してPixelaに記録するLamba関数を開発 Garmin connectのストレス測定結果をPixela + Serverlessで草化 - qrunch.net この際，iPhoneのスクリーンショットをS3へ送る手段を下記のように構築 IFTTTでiOSのスクリーンショットをDropboxに入れ，ZapierでDropboxからS3にコピーするようにして前に作ったストレス草化Lambdaとシームレスに連携するようにした．ちょっと経由しすぎな気もするけどひとまず…
&amp;mdash; JagiJagiJagi (@jagijagijag1) November 8, 2018
しかしながら，これだけのためにZapierに課金するのも辛いので，イベント駆動を妥協して定期実行でDropbox→S3転送機能を実現してみた これにより，Zapierを経由せず，iPhoneからPixelaをシームレスに結合 環境 MacOS Mojave Go 1.11.5 Serverless Framework 1.38.0 ライブラリ選択 DropboxのGoライブラリは以下の2つを発見 GitHub - dropbox/dropbox-sdk-go-unofficial: An UNOFFICIAL Dropbox v2 API SDK for Go GitHub - tj/go-dropbox: Dropbox v2 client for Go.</description></item><item><title>Cisco AnyConnectで再接続が数十秒ごとに繰り返される場合の対処</title><link>http://jagijagijag1.github.io/blog/posts/2019_01_22/</link><pubDate>Tue, 22 Jan 2019 18:43:48 +0900</pubDate><guid>http://jagijagijag1.github.io/blog/posts/2019_01_22/</guid><description>環境 Windows 10 Pro 1803 Cisco AnyConnect Secure Mobility Client 4.6.011 症状 Cisco AnyConnectにてVPN接続した際に，認証・接続は成功するが，その後再接続(ログではReconnecting)を数秒〜数十秒おきに繰り返し続ける 解決 2019/01/24 追記
バージョン4.6.02074で修正済み
https://community.cisco.com/t5/vpn-and-anyconnect/anyconnect-reconnects-with-hyper-v-adapter/m-p/3695961/highlight/true#M146261 アップデートできない場合の暫定対応策は以下
Windows 10 ProのHyper-V機能を無効にする ref. Windows 10 Hyper-Vを有効/無効にする方法 - 備忘録 Dockerをインストールした場合，Docker自体をアンインストールしていてもHyper-Vが有効になっている可能性あり TODO: Hyper-V(おそらく仮想スイッチ)とAnyConnectを共存させる方法は不明</description></item><item><title>「あとで読む」をPixelaで可視化</title><link>http://jagijagijag1.github.io/blog/posts/2018_12_02/</link><pubDate>Sun, 02 Dec 2018 10:54:22 +0900</pubDate><guid>http://jagijagijag1.github.io/blog/posts/2018_12_02/</guid><description>tl;dr なんでも草化できるWebサービスPixelaの利用についてつぶやいたところ，作者のa-knowさんから下記ツイートをいただきました！
うおお……これはまた新しい活躍方法…！！ぜひブログなどにしていただきたいっ！ https://t.co/Cz5zrPVG0Q
&amp;mdash; a-know (@a_know) 2018年12月1日
正直なところ技術的なポイントは何もないのですが，せっかくなのでPixelaの利用事例として記事化してみました．やったことは以下だけです．
PixelaのWebhookとIFTTTのInstapaper連携を用いることで下記を実現し，&amp;ldquo;あとで読む&amp;quot;を可視化 Instapaperに新たに記事が追加されたら，DecrementのWebhookを叩きpixelを茶色化 Instapaperに保存した記事が(読み終わって)アーカイブされたら，IncrementのWebhookを叩きpixelを緑化 動機：溜まっていく一方の&amp;quot;あとで読む&amp;rdquo; 気になった記事があると，あとでちゃんと読もうとInstapaperやはてブなどのサービスに記事を放り込んでおくのはよくあるかなと しかしこの&amp;quot;あとで読む&amp;quot;は，積読や積みゲーよろしく溜まっていく一方になりがち これに対し，下記の点を可視化できれば溜め込まないモチベになるかも？ どれくらい記事をあとで読むつもりで放り込んでいるか (溜め込み度合い) どれくらいあとで読むことにした記事を読んでいるか (消化度合い) 解決(?)：Pixelaでの可視化 以下のIFTTT Appletを作成し，&amp;ldquo;あとで読む&amp;quot;記事の数を可視化
Instapaper (If New item saved) -&amp;gt; Webhooks (then Make a web request) Instapaper部分は，事前にアカウント連携しておき，既存のアクションを選択するのみ Webhooksでは，PixelaのDecrement Webhookを実行 記事が増えるのはネガティブ方向なのでDecrement = 茶色化 Instapaper (If New archived item) -&amp;gt; Webhooks (then Make a web request) Instapaper部分は，事前にアカウント連携しておき，既存のアクションを選択するのみ Webhooksでは，PixelaのIncrement Webhookを実行 記事が減るのはポジティブ方向なのでIncrement = 緑化 Webhooksの部分の詳細 Pixela API Documentを参考に，Increment/DecrementのWebhookを作っておく IFTTT上では，&amp;ldquo;that&amp;quot;側で&amp;quot;Webhooks&amp;quot;を選択し，下記パラメタを設定 URL: https://pixe.</description></item><item><title>Elastic Beanstalkで作成されたS3 バケットが削除できないときの対応</title><link>http://jagijagijag1.github.io/blog/posts/2018_11_29/</link><pubDate>Thu, 29 Nov 2018 21:36:19 +0900</pubDate><guid>http://jagijagijag1.github.io/blog/posts/2018_11_29/</guid><description>現象 Elastic Beanstalkを用いるとソースコードなどを格納するS3バケットが作成される アプリ自体を削除したあともバケットが残っている場合，S3のコンソールから削除しようとしても削除できない場合あり 原因 自動でバケットポリシーが設定されており，明示的に削除が拒否されている 対策 バケットのコンソールで&amp;quot;アクセス権限&amp;quot;→&amp;quot;バケットポリシー&amp;quot;を選択し，右上の&amp;quot;削除&amp;quot;でポリシーを削除 その後，バケット一覧に戻り，再びバケット削除を実行すれば削除されるはず</description></item><item><title>serverless framworkで画像認識して関係する映画を推薦するSlack Botを作ったまとめ (No Server November Challenge)</title><link>http://jagijagijag1.github.io/blog/posts/2018_11_24/</link><pubDate>Sat, 24 Nov 2018 16:33:22 +0900</pubDate><guid>http://jagijagijag1.github.io/blog/posts/2018_11_24/</guid><description>serverless frameworkを開発しているServerless, Inc.の企画で，No Server Novemberが開催中
11月中に毎週課題が出される
Challenges that are designed to help experienced users level up, and brand new users get started githubリポジトリのリンクを#noServerNovemberをつぶやくとなにか(official Serverless swag)もらえる?
Nov 12の課題であるAnimalBotとNov 19の課題であるSlack botを組み合わせて開発してみたので内容の紹介
Nov 12 AnimalBot: 画像URLをメンションすると写っている動物を返信するTwitter Botを作る課題 Nov 19 Slack bot: /actionとすると80年台アクション映画をランダムに教えてくれるSlack Botを作る課題 作ったもの Slack上でBotに画像URLをメンションすると，写っている内容と，関連する映画を教えてくれるシステム 画像認識にはAmazon Rekognitionを利用 映画情報はThe Movie DatabaseからAPI経由で取得 結果 猫の画像を送ると，猫が写っていることと，関連映画として魔女の宅急便を教えてくれた 環境 MacOS Mojave Python 3.</description></item><item><title>Togglの記録をServerless + Pixelaで草化</title><link>http://jagijagijag1.github.io/blog/posts/2018_11_10/</link><pubDate>Sat, 10 Nov 2018 10:52:38 +0900</pubDate><guid>http://jagijagijag1.github.io/blog/posts/2018_11_10/</guid><description>作業時間などの時間管理ツールとしてTogglがある いつ，どの作業をしたかを記録 各作業をプロジェクトやタグで分類可能 Toggl Reportsで可視化も提供されており，特定の作業をどれくらい継続しているか，どのくらい時間をかけているかを見れる でもとりあえず草化したい！ ToggleはAPIを提供しているので比較的用意にデータ抽出可能 画像認識とかいらない！ 作ったもの 1日1回，前日に特定プロジェクトにかけた時間をTogglから抽出し，Pixelaに記録 結果 自分の勉強時間を草化できた 環境 MacOS Mojave Go 1.11.1 Serverless Framework 1.32.0 つまづきメモ しょぼい内容だが備忘録として Lambdaにて時間を扱う場合の注意 CloudWatch Eventsをcron式で時間指定する場合，UTCで指定すること e.g. JSTで毎日午前1時に実行したい→UTCで午後4時(-9時間)を指定する cron( 0 16 * * ? * ) Lambda関数で日時を取得する場合(e.g. Goでのtime.Now())，標準ではUTCで取得する 日本時間を使いたい場合はLambda関数の環境変数でタイムゾーンを指定すること e.g. 変数TZ, 値Asia/Tokyo Toggl APIの使い方 TogglのAPIを利用したい場合，リクエストにAPIトークンを含める APIトークンはProfileから取得可能: https://support.</description></item><item><title>CAV 2018でのAWS招待講演のまとめ</title><link>http://jagijagijag1.github.io/blog/posts/2018_11_07/</link><pubDate>Wed, 07 Nov 2018 22:29:12 +0900</pubDate><guid>http://jagijagijag1.github.io/blog/posts/2018_11_07/</guid><description>Formal Reasoning About the Security of Amazon Web Services 形式手法に関するトップカンファレンスであるCAV 2018にて，AWSから講演(Invited Paperの発表)がありました．
そこでの発表からAWSは形式手法にかなり力を入れている印象を受け，割と重要な内容かなと思い，単なる箇条書きですが抜粋・まとめてみました． 月並みですがAWSも中の人達もまじすごい．
著者(発表者)/所属機関 Byron Cook (Amazon Web Services, University College London)
出典 FLoC 2018 (CAV 2018)
FLoC Plenary Lecture (CAV 2018 Invited Paper) AWSでの形式手法の活用について Open Accessのため↓で閲覧可能 Formal Reasoning About the Security of Amazon Web Services | SpringerLink 講演の映像も↓から視聴可能 Formal Reasoning about the Security of Amazon Web Services | University of Oxford Podcasts - Audio and Video Lectures 内容 AWSでは分散アルゴリズムの設計に形式手法(TLA+)を使用 (2014) その後も継続的に形式手法を取り入れいているようで，本論文では特にセキュリティへの形式手法適用事例を紹介 Security of the Cloud: Where Formal Reasoning Fits In AWS内部の開発，特にセキュリティレビューで定理証明やモデル検査(symbolic model checking)の利用が増えている 2017年だけでも下記の事例にて定理証明やモデル検査を適用 s2n (TLS/SSL実装)の検証 ちなみにこの内容の論文が同会議にて発表されている Continuous Formal Verification of Amazon s2n | SpringerLink ハイパーバイザ，ブートローダ，BIOS，ファームウェアの検証 こっちも同会議で発表あり Model Checking Boot Code from AWS Data Centers | SpringerLink ガーベッジコレクタ ネットワーク設計 OSSを活用しつつ使う上で生じた変更をフィードバックしており，例えば下記を利用+貢献 CBMC: C/C++向けのbounded model checker SAW: CやJabaでの特定性質の検証 SMACK: Cプログラムに対するアサーション検証 s2nなど一部プロジェクトでは形式検証ツールをCI/CDに組み込み，継続的検証を実施 SMT-basedのツールで設定ミス防止を図っている 形式手法の利用はコードを書く前から始まっている＝プロトコルやアルゴリズムの設計段階から利用 Securing Customers in the Cloud AWS利用者側に対しても形式手法の適用が始まっている 例えば，S3の公開設定ミスを警告する機能をSMTソルバを用いて実現 おそらく↓の話 How AWS uses automated reasoning to help you achieve security at scale | AWS Security Blog AWS Macieでも同様のツールを利用 複雑なネットワーク設定時の到達性(おそらくルーティングや通信可否)をdatalogを用いて検証 その他 他社事例(文献)として以下に言及 (抜粋) IBM, Google @ Dagstuhl Seminar 2013 Microsoft @ SOSP 2015 分散システムの検証 Facebook @ LICS 2018 codebaseの継続的検証 感想 TLA+の適用に始まり，AWSは形式手法の適用に対し継続的に力を入れいている印象 特に今回は，形式検証のトップカンファレンスであるCAVにて2本の論文採択+Invited talkをしており抜きん出ている こういった会議でプレゼンスを上げることで，AWS利用時の安心度・信頼感が高まる素晴らしい取り組み これだけセキュリティチームで形式手法が利用される/開発者もTLA+などを使えるところを見るに，中の人がちゃんとComputer Scienceの素養を持っていて優秀な模様</description></item><item><title>Garmin connectのストレス測定結果をPixela + Serverlessで草化</title><link>http://jagijagijag1.github.io/blog/posts/2018_10_28/</link><pubDate>Sun, 28 Oct 2018 11:11:05 +0900</pubDate><guid>http://jagijagijag1.github.io/blog/posts/2018_10_28/</guid><description>Garmin connectでは心拍数の計測をもとにストレスを数値化してくれる
アプリ内では，一覧でみたいときに折れ線グラフしかない + 最大4週間分しか見れない
別の可視化方法として草化してみたい
作ったもの Garmin connectの画面キャプチャをS3にアップロードすると，日付とストレス値をPixelaに記録するシステム
2018/11/17 追記： 下記を用いればiOSでスクリーンショットを取るだけでPixelaに記録できます． (iOS→Dropbox by IFTTT + Dropbox→S3 by Zapier）
Add your latest iPhone screenshots to a Dropbox folder Amazon S3 + Dropbox Integrations 結果：いい感じに草化できた気がする 直近のストレスが高い，日曜は比較的ストレスが少ない
なるべく色がつかない(薄くなる)ようにしたいという逆モチベ
環境 MacOS Mojave Go 1.11.1 Serverless Framework 1.32.0 iPhone 7(iOS 12.01) + Garmin Connect 4.</description></item></channel></rss>